import axios from "axios";

export const searchArtists = async (token, searchKey) => {
    try {
        const res = await axios.get("https://api.spotify.com/v1/search", {
            headers: {
                Authorization: `Bearer ${token}`
            },
            params: {
                q: searchKey,
                type: "artist",
                limit: 30
            }
        })
        return { data: res.data.artists.items, error: null };
    } catch (error) {
        return { data: null, error: error };
    }
}

export const searchTracks = async (token, searchKey) => {
    try {
        const res = await axios.get("https://api.spotify.com/v1/search", {
            headers: {
                Authorization: `Bearer ${token}`
            },
            params: {
                q: searchKey,
                type: "track",
                limit: 30
            }
        })
        return { data: res.data.tracks.items, error: null };
    } catch (error) {
        return { data: null, error: error };
    }
}

export const createPlaylist = async (token) => {
    try {
        const meRes = await axios.get('https://api.spotify.com/v1/me', {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        const userId = meRes.data.id;

        const createPlaylistRes = await axios.post(`https://api.spotify.com/v1/users/${userId}/playlists`, {
            name: "Your New Playlist",
            description: "Generated by BeatBot",
            public: true
        }, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        return { playlistId: createPlaylistRes.data.id, error: null };
    } catch (error) {
        return { playlistId: null, error: error };
    }

};

export const addTracks = async (token, playlistId, additions) => {
    try {
        await axios.post(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {
            uris: additions
        }, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        }
        );
        return { error: null };
    } catch (error) {
        return { error: error };
    }
}

const getCriteria = async (token, selectedArtists, selectedTracks) => {
    try {
        // fetch desireable features from the seeds
        let criteria = new Map();

        for (let artist of selectedArtists) {
            const artistRes = await axios.get(`https://api.spotify.com/v1/artists/${artist}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            const artistData = artistRes.data;

            criteria.set(artist, 1);

            for (let genre of artistData.genres) {
                if (criteria.has(genre)) {
                    criteria.set(genre, criteria.get(genre) + 1);
                } else {
                    criteria.set(genre, 1);
                }
            }
        }

        for (let track of selectedTracks) {
            const trackRes = await axios.get(`https://api.spotify.com/v1/tracks/${track}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            const trackData = trackRes.data;

            for (let artist of trackData.artists) {
                if (criteria.has(artist.id)) {
                    criteria.set(artist.id, criteria.get(artist.id) + 1);
                } else {
                    criteria.set(artist.id, 1);
                }

                const artistRes = await axios.get(`https://api.spotify.com/v1/artists/${artist.id}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                const artistData = artistRes.data;

                for (let genre of artistData.genres) {
                    if (criteria.has(genre)) {
                        criteria.set(genre, criteria.get(genre) + 1);
                    } else {
                        criteria.set(genre, 1);
                    }
                }
            }
        }
        return { criteria: criteria, error: null};
    } catch (error) {
        return { criteria: null, error: error };
    }
}

const rankRecommendations = async (token, recommendations, selectedArtists, selectedTracks) => {
    try {
        const { criteria, error: criteriaError } = await getCriteria(token, selectedArtists, selectedTracks);
        if (criteriaError) {
            throw criteriaError;
        }

        let scoredTracks = [];

        for (let recommendation of recommendations) {
            let score = 0;
    
            for (let artist of recommendation.artists) {
                if (criteria.has(artist.id)) {
                    score += criteria.get(artist.id);
                }
    
                const artistRes = await axios.get(`https://api.spotify.com/v1/artists/${artist.id}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                const artistData = artistRes.data;
    
                for (let genre of artistData.genres) {
                    if (criteria.has(genre)) {
                        score += criteria.get(genre);
                    }
                }
            }
    
            scoredTracks.push({ track: recommendation, score: score });
        }
    
        scoredTracks.sort((a, b) => b.score - a.score);
        return { additions: scoredTracks.slice(0, 30).map(item => item.track.uri), error: null };
    } catch (error) {
        return { additions: null, error: error }
    }

}

export const getRecommendations = async (token, selectedArtists, selectedTracks) => {
    try {
        const allSeeds = [...selectedArtists, ...selectedTracks];
        const recommendations = new Set();
        
        const batchedSeeds = [];
        while (allSeeds.length > 0) {
            batchedSeeds.push(allSeeds.splice(0, 5)); // separate seeds into batches of 5 which is Spotify's max
        }

        for (const batch of batchedSeeds) { // for each batch separate the songs and artists
            const seedArtists = batch.filter(seed => selectedArtists.includes(seed)).join(',');
            const seedTracks = batch.filter(seed => selectedTracks.includes(seed)).join(',');
            const res = await axios.get(`https://api.spotify.com/v1/recommendations?seed_artists=${seedArtists}&seed_tracks=${seedTracks}&limit=30`, {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });
            res.data.tracks.forEach(track => recommendations.add(track));
        }

        let { additions, error: rankError } = await rankRecommendations(token, Array.from(recommendations), selectedArtists, selectedTracks);
        if (rankError) {
            throw rankError;
        }
        
        return { recommendationURIs: additions, error: null };
    } catch (error) {
        return { recommendationURIs: null, error: error };
    }
}